--20210226
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE PROTEST1 (P_VALUE IN NUMBER, P_MSG IN VARCHAR2)
IS
V_MSG VARCHAR2(50):=NULL;
BEGIN
    V_MSG:='HELLO PL/SQL';
    DBMS_OUTPUT.PUT_LINE(P_VALUE);
    DBMS_OUTPUT.PUT_LINE('V_MSG'||'='||V_MSG);
END PROTEST1;

EXECUTE PROTEST1(10,'JUNFE');


-- %TYPE : REFERENCE TYPE
CREATE OR REPLACE PROCEDURE EMPSEL1(P_EMPNO IN EMP.EMPNO%TYPE)
IS
V_EMPNO NUMBER(7):=0;
V_ENAME VARCHAR2(20):=NULL;
V_SAL EMP.SAL%TYPE;
V_COMM EMP.COMM%TYPE;
V_JOB EMP.JOB%TYPE;
BEGIN
SELECT EMPNO,ENAME,SAL,COMM,JOB INTO V_EMPNO,V_ENAME,V_SAL,V_COMM,V_JOB
FROM EMP
WHERE EMPNO=P_EMPNO;
DBMS_OUTPUT.PUT_LINE('EMPNO'||' '||V_EMPNO);
DBMS_OUTPUT.PUT_LINE('ENAME'||' '||V_ENAME);
DBMS_OUTPUT.PUT_LINE('SAL'||' '||V_SAL);
DBMS_OUTPUT.PUT_LINE('COMM'||' '||V_COMM);
DBMS_OUTPUT.PUT_LINE('JOB'||' '||V_JOB);
END EMPSEL1;

EXECUTE EMPSEL1(7521);


CREATE OR REPLACE PROCEDURE STUDSEL(P_STUDNO IN STUDENT.STUDNO%TYPE)
IS
V_STUDNO STUDENT%ROWTYPE; -- STUDNO|NAME|USERID...
BEGIN
SELECT STUDNO,NAME,USERID,GRADE,IDNUM,TEL,HEIGHT INTO
       V_STUDNO.STUDNO,V_STUDNO.NAME,V_STUDNO.USERID,
       V_STUDNO.GRADE,V_STUDNO.IDNUM,V_STUDNO.TEL,V_STUDNO.HEIGHT
FROM STUDENT
WHERE STUDNO=10101;
DBMS_OUTPUT.PUT_LINE(V_STUDNO.STUDNO||' '||V_STUDNO.NAME||' '||V_STUDNO.USERID||' '||
       V_STUDNO.GRADE||' '||V_STUDNO.IDNUM||' '||V_STUDNO.TEL||' '||V_STUDNO.HEIGHT);
END STUDSEL;

EXECUTE STUDSEL(10101);


CREATE OR REPLACE PROCEDURE JOINVIEW(P_EMPNO IN NUMBER)
IS
    TYPE EDJOIN IS RECORD(V_EMPNO EMP.EMPNO%TYPE,
                          V_ENAME EMP.ENAME%TYPE,
                          V_SAL EMP.SAL%TYPE,
                          V_COMM EMP.COMM%TYPE,
                          V_DEPTNO EMP.DEPTNO%TYPE,
                          V_DNAME DEPT.DNAME%TYPE,
                          V_LOC DEPT.LOC%TYPE);
    EDJ EDJOIN;
BEGIN
    SELECT EMPNO,ENAME,SAL,COMM,E.DEPTNO,DNAME,LOC
    INTO
    EDJ.V_EMPNO,EDJ.V_ENAME,EDJ.V_SAL,EDJ.V_COMM,EDJ.V_DEPTNO,
    EDJ.V_DNAME,EDJ.V_LOC
    FROM EMP E,DEPT D
    WHERE E.DEPTNO=D.DEPTNO AND E.EMPNO=P_EMPNO;
    DBMS_OUTPUT.PUT_LINE(EDJ.V_EMPNO||' '||EDJ.V_ENAME||' '||EDJ.V_SAL||' '||
    EDJ.V_COMM||' '||EDJ.V_DEPTNO||' '||EDJ.V_DNAME||' '||EDJ.V_LOC);

END JOINVIEW;

EXECUTE JOINVIEW(7521);

SELECT * FROM EMP;
SELECT * FROM DEPT;

CREATE OR REPLACE PROCEDURE TABLE_TEST(V_DEPTNO IN EMP.DEPTNO%TYPE)
IS
    TYPE EMPNO_TABLE IS TABLE OF EMP.EMPNO%TYPE
    INDEX BY BINARY_INTEGER;
    TYPE ENAME_TABLE IS TABLE OF EMP.ENAME%TYPE
    INDEX BY BINARY_INTEGER;
    TYPE SAL_TABLE IS TABLE OF EMP.SAL%TYPE
    INDEX BY BINARY_INTEGER;
    
    ET EMPNO_TABLE;
    EN ENAME_TABLE;
    ES SAL_TABLE;
    i BINARY_INTEGER:=0;
BEGIN
    -- ELIST로 EMPNO,ENAME,SAL을 받아서 TABLE에 넣어줌
    FOR ELIST IN (SELECT EMPNO,ENAME,SAL FROM EMP WHERE DEPTNO=V_DEPTNO)LOOP
        i:=i+1;
        ET(i):=ELIST.EMPNO;
        EN(i):=ELIST.ENAME;
        ES(i):=ELIST.SAL;
    END LOOP;
    
    
    -- 반복문을 이용한 출력
    FOR cnt IN 1..i LOOP
        DBMS_OUTPUT.PUT_LINE(ET(cnt)||' '||EN(cnt)||' '||ES(cnt));
    END LOOP;
END TABLE_TEST;

EXECUTE TABLE_TEST(10);


CREATE TABLE EMPQL
AS
SELECT EMPNO,ENAME,SAL,COMM,JOB
FROM EMP
WHERE SAL=-1;

-- INSERT
CREATE OR REPLACE PROCEDURE EINJECT(P_EMPNO IN EMPQL.EMPNO%TYPE,
                                    P_ENAME IN EMPQL.ENAME%TYPE,
                                    P_SAL IN EMPQL.SAL%TYPE,
                                    P_COMM IN EMPQL.COMM%TYPE,
                                    P_JOB IN EMPQL.JOB%TYPE)
IS

BEGIN
INSERT INTO EMPQL VALUES(P_EMPNO,P_ENAME,P_SAL,P_COMM,P_JOB);
DBMS_OUTPUT.PUT_LINE(P_EMPNO||' '||P_ENAME||' '||P_SAL||' '||P_COMM||' '||P_JOB||' INSERT SUCCESS ');
COMMIT;
END EINJECT;

EXECUTE EINJECT(8894,'FRONT',10000,1000,'BOSS');

SELECT * FROM EMPQL;
SELECT * FROM USER_OBJECTS;

SET SERVEROUTPUT ON; 


-- DELETE
CREATE OR REPLACE PROCEDURE EDELETE(P_EMPNO IN EMPQL.EMPNO%TYPE)
IS
BEGIN
DELETE FROM EMPQL WHERE EMPNO=P_EMPNO;
DBMS_OUTPUT.PUT_LINE(P_EMPNO||' '||' DELETE COMPLETE');
END EDELETE;

EXECUTE EDELETE(8894);

CREATE OR REPLACE PROCEDURE EUPDATE(P_EMPNO IN EMPQL.EMPNO%TYPE,
                                    P_ENAME IN EMPQL.ENAME%TYPE,
                                    P_SAL IN EMPQL.SAL%TYPE,
                                    P_COMM IN EMPQL.COMM%TYPE,
                                    P_JOB IN EMPQL.JOB%TYPE)
IS
BEGIN
UPDATE EMPQL SET ENAME=P_ENAME WHERE EMPNO=P_EMPNO;
UPDATE EMPQL SET SAL=P_SAL WHERE EMPNO=P_EMPNO;
UPDATE EMPQL SET COMM=P_COMM WHERE EMPNO=P_EMPNO;
UPDATE EMPQL SET JOB=P_JOB WHERE EMPNO=P_EMPNO;
DBMS_OUTPUT.PUT_LINE(P_EMPNO||' '||' UPDATE COMPLETE');
END EUPDATE;

SELECT * FROM EMPQL;
EXECUTE EUPDATE(8891,'JUNFE',1000,100,'STUDENT');


CREATE OR REPLACE PROCEDURE EMPQLSEL
IS
BEGIN

    FOR FORLIST IN (SELECT * FROM DEPT) LOOP
    DBMS_OUTPUT.PUT_LINE(FORLIST.DEPTNO||' '||FORLIST.DNAME||' '||FORLIST.LOC);
    END LOOP;
--    FOR SU IN 1..10 LOOP
--    DBMS_OUTPUT.PUT_LINE(SU);
--    END LOOP;
END EMPQLSEL;

EXECUTE EMPQLSEL;

DECLARE
BEGIN
    DBMS_OUTPUT.PUT_LINE('TEST');
END;

BEGIN
    FOR CNT IN REVERSE 1..100 LOOP
    DBMS_OUTPUT.PUT_LINE(CNT);
    END LOOP;
END;


DECLARE
N NUMBER(5);
Y NUMBER(5);
BEGIN
    FOR N IN 1..9 LOOP
        FOR Y IN 2..9 LOOP
        DBMS_OUTPUT.PUT(Y||'*'||N||'='||(Y*N));
        DBMS_OUTPUT.PUT(CHR(9));
        END LOOP;
        DBMS_OUTPUT.PUT_LINE(' ');
    END LOOP;
END;

DECLARE
    I NUMBER(5);
    J NUMBER(5):=1;
BEGIN
    J:=1;
    WHILE J<=9 LOOP
        DBMS_OUTPUT.PUT_LINE(J);
        J:=J+1;
    END LOOP;
END;

-- WHILE GUGUDAN
DECLARE
    I NUMBER(5);
    J NUMBER(5);
BEGIN
    I:=1;
    WHILE I<=9 LOOP
        J:=1;
        WHILE J<=9 LOOP
        DBMS_OUTPUT.PUT(I||'*'||J||'='||(I*J));
        DBMS_OUTPUT.PUT(CHR(9));
        J:=J+1;
        END LOOP;
        DBMS_OUTPUT.PUT_LINE(' ');
        I:=I+1;
    END LOOP;
END;


DECLARE
    NUM NUMBER(5):=0;
BEGIN
    LOOP
        IF NUM>5 THEN EXIT;
        END IF;
    DBMS_OUTPUT.PUT_LINE('TEST LOOP'||NUM);
    NUM:=NUM+1;
    END LOOP;
END;

-----------------------------------------------------------------------------
CREATE TABLE STUDCP
AS
SELECT STUDNO,NAME,BIRTHDATE
FROM STUDENT
WHERE STUDNO=-1;

SELECT * FROM STUDCP;

DECLARE
V_CNT NUMBER(5):=10;
BEGIN
    LOOP
        INSERT INTO STUDCP(STUDNO,NAME,BIRTHDATE)
        VALUES(V_CNT,'J'||TO_CHAR(V_CNT),SYSDATE);
        V_CNT:=V_CNT+1;
        EXIT WHEN V_CNT>=500;
    END LOOP;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE(V_CNT||' DATA SUCCESS');
END;

SELECT * FROM STUDCP;
DELETE FROM STUDCP;
COMMIT;


DECLARE
V_CNT NUMBER(5):=0;
BEGIN
WHILE V_CNT<500 LOOP
    INSERT INTO STUDCP(STUDNO,NAME,BIRTHDATE)
    VALUES(V_CNT,'J'||TO_CHAR(V_CNT),SYSDATE);
    V_CNT:=V_CNT+1;
END LOOP;
END;

SELECT * FROM STUDCP;


CREATE OR REPLACE PROCEDURE DEPT_SEARCH(P_EMPNO IN NUMBER)
IS
    V_DEPTNO EMP.DEPTNO%TYPE;
BEGIN
    SELECT DEPTNO INTO V_DEPTNO FROM EMP WHERE EMPNO=P_EMPNO;
    IF V_DEPTNO = 10 THEN
    DBMS_OUTPUT.PUT_LINE('ACCOUNTING DEPARTMENT');
    ELSIF V_DEPTNO=20 THEN
    DBMS_OUTPUT.PUT_LINE('RESEARCH DEPARTMENT');
    ELSIF V_DEPTNO=30 THEN
    DBMS_OUTPUT.PUT_LINE('OPERATIONS DEPARTMENT');
    ELSE
    DBMS_OUTPUT.PUT_LINE('OPERATION DEPARTMENT');
    END IF;
END DEPT_SEARCH;

EXECUTE DEPT_SEARCH(7521);

SELECT * FROM EMP;
SELECT * FROM DEPT;


CREATE OR REPLACE PROCEDURE ELSPRO(P_EMPNO IN NUMBER)
IS
V_SAL NUMBER(5);
V_GRADE CHAR(5);
BEGIN
    SELECT SAL INTO V_SAL FROM EMP WHERE EMPNO=P_EMPNO;
    IF V_SAL BETWEEN 800 AND 1500 THEN V_GRADE:='A';
    ELSE
        V_GRADE:='Z';
    END IF;
    DBMS_OUTPUT.PUT_LINE('SAL='||V_SAL||' '||V_GRADE);
END ELSPRO;

EXECUTE ELSPRO(7521);