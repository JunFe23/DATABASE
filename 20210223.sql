--20210223
SELECT ENAME,SAL*12
FROM EMP
WHERE SAL*12>=(3000)*12;

SELECT ENAME,SAL
FROM EMP
WHERE SAL>=3000;

SELECT * FROM USER_INDEXES;


EXPLAIN PLAN FOR
SELECT *
FROM EMP WHERE EMPNO=7788;
SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);

SELECT * FROM USER_INDEXES;
SELECT /*+INDEX_ASC(EMP PK_EMP)*/EMPNO,ENAME,SAL
FROM EMP
WHERE EMPNO>0;

-- STUD_NO_PK
-- RANGE SCAN
EXPLAIN PLAN FOR
SELECT /*+INDEX_DESC(STUDENT STUD_NO_PK)*/ STUDNO
FROM STUDENT
WHERE STUDNO>10202;
SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);

-- UNIQUE SCAN
EXPLAIN PLAN FOR
SELECT STUDNO
FROM STUDENT
WHERE STUDNO=10202;
SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);
-- PRIMARY KEY라서 기본적으로 INDEX적용돼서 순차적으로 정렬되어 있다.

EXPLAIN PLAN FOR
SELECT /*+INDEX(EMP PK_EMP)*/EMPNO,ENAME,SAL
FROM EMP
WHERE EMPNO=7788;

SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);

-- 수직적 탐색만으로 데이터를 찾는 스캔방식
-- 작동시점 : UNIQUE인덱스를 통해 = 조건으로 탐색하는 경우
-- 중복되지 않는 UNIQUE한 값을 = 조건으로 검색한 경우 더이상 검색하지 않음.

SELECT * FROM USER_INDEXES;

EXPLAIN PLAN FOR
SELECT /*+INDEX_DESC(EMP EMP_SAL_IDX)*/EMPNO,ENAME,SAL
FROM EMP
WHERE SAL>=3000;
SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);

-- 직업, 직업별 토탈월급을 출력하는데 직업이 SALESMAN인
-- 사원들을 제외하고 출력하고 또 직업별 토탈월급이 4000 이상인것만
-- 출력하고 또 직업별 토탈월급이 높은 것부터 출력하라
SELECT JOB,SUM(SAL)
FROM EMP
WHERE JOB<>'SALESMAN'
GROUP BY JOB
HAVING SUM(SAL)>=4000
ORDER BY SUM(SAL) DESC;


-- 커미션이 NULL인 사원들의 정보출력
-- COMM에서 NULL인 값을 -1로 줌.
CREATE INDEX EMP_COMM_IDX
ON EMP(NVL(COMM,-1));


EXPLAIN PLAN FOR
SELECT EMPNO,ENAME,SAL,COMM
FROM EMP
WHERE NVL(COMM,-1)=-1;
SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);

SELECT * FROM STUDENT;
-- 너 NULL이니? 풀스캔
CREATE INDEX STUD_PROFNO_F ON STUDENT(NVL(PROFNO,-2));
--EXPLAIN PLAN FOR
SELECT STUDNO,NAME,GRADE,HEIGHT,PROFNO
FROM STUDENT
WHERE PROFNO IS NULL;
SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);

-- RANGE SCAN으로 표현.
EXPLAIN PLAN FOR
SELECT STUDNO,NAME,GRADE,HEIGHT,PROFNO
FROM STUDENT
WHERE NVL(PROFNO,-2)=-2;
SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);

-- 교수이름의 오름차순으로 정렬하여 출력
CREATE INDEX PROF_NAME_IDX ON PROFESSOR(NAME);
SELECT *
FROM PROFESSOR
WHERE NAME>' ';

-- 입사가 빠른순, 느린순으로 정렬하여 출력
CREATE INDEX EMP_HIREDATE_IDX ON EMP(HIREDATE);
SELECT *
FROM EMP
WHERE HIREDATE>TO_DATE('50/01/01');
SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);


SELECT /*+INDEX_DESC(EMP EMP_HIREDATE_IDX) */ *
FROM EMP
WHERE HIREDATE>TO_DATE('50/01/01');

-- 연봉이 많은 순서로 적은 순서로 출력
CREATE INDEX EMP_SAL_IDX ON EMP(SAL);
SELECT /*+INDEX_ASC(EMP EMP_SAL_IDX)*/*
FROM EMP
WHERE SAL>0;

SELECT *
FROM EMP
WHERE SAL>0;

-- 연봉이 두번째로 많은 사람의 정보 출력
CREATE INDEX PROFESSOR_SAL_IDX
ON PROFESSOR(SAL);
SELECT *
FROM(
SELECT /*+INDEX_DESC(PROFESSOR PROFESSOR_SAL_IDX)*/
PROFNO,NAME,USERID,POSITION,SAL,HIREDATE,ROWNUM RM
FROM PROFESSOR
WHERE SAL>0) WHERE RM = 2 ;

SELECT /*+INDEX_DESC(PROFESSOR PROFESSOR_SAL_IDX)*/
PROFNO,NAME,USERID,POSITION,SAL,HIREDATE,ROWNUM RM
FROM PROFESSOR;

-- 결합 인덱스 생성.
CREATE INDEX EMP_JOB_EMIDX
ON EMP(JOB,EMPNO);

-- 직업, 직업별 인원수를 구하세요.
-- INDEX FAST FULL SCAN
EXPLAIN PLAN FOR
SELECT /*+INDEX_FFS(EMP EMP_JOB_EMIDX) */JOB,COUNT(JOB)
FROM EMP
GROUP BY JOB;
SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);


EXPLAIN PLAN FOR
SELECT JOB,COUNT(JOB)COUNT,LISTAGG(ENAME,' ')ENAME
FROM EMP
GROUP BY JOB;
SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);

DROP INDEX EMP_SAL_IDX2;
-- 부서, 부서별 최고연봉
CREATE INDEX EMP_SAL_IDX2 ON EMP(DEPTNO,SAL,EMPNO);

EXPLAIN PLAN FOR
SELECT /*+INDEX_FFS(EMP EMP_SAL_IDX2)*/DEPTNO,MAX(SAL)
FROM EMP
GROUP BY DEPTNO;
SELECT*FROM TABLE(DBMS_XPLAN.DISPLAY);

-- 입사일,입사일별 인원수를 출력
CREATE INDEX EMP_HIREDATE_IDX2 ON EMP(HIREDATE,EMPNO);

EXPLAIN PLAN FOR
SELECT /*+INDEX_FFS(EMP EMP_HIREDATE_IDX2)*/HIREDATE, COUNT(HIREDATE)
FROM EMP
GROUP BY HIREDATE;
SELECT*
FROM TABLE(DBMS_XPLAN.DISPLAY);

DROP INDEX STUD_HEIGHT_IDX;
CREATE INDEX STUD_HEIGHT_IDX ON STUDENT(HEIGHT,STUDNO,GRADE);
EXPLAIN PLAN FOR
SELECT /*+INDEX_FFS(STUDENT STUD_HEIGHT_IDX)*/GRADE,MAX(HEIGHT)
FROM STUDENT
GROUP BY GRADE;
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);


-- Q. 직업, 직업별 최소월급을 출력하는데 직업이 SALESMAN인 것만 출력하시오.
-- 1번째 방법
SELECT JOB,MIN(SAL)
FROM EMP
WHERE JOB='SALESMAN'
GROUP BY JOB;

-- 2번째 방법
CREATE INDEX EMP_JOB2_SAL ON EMP(JOB,SAL);
SELECT /*+INDEX_ASC(EMP EMP_JOB2_SAL)*/JOB,SAL
FROM EMP
WHERE JOB = 'SALESMAN' AND ROWNUM < 2;


-- Q.부서번호, 이름, 월급, 자기부서번호의 평균월급을 출력하시오.
SELECT E.DEPTNO,E.ENAME,E.SAL,AL 평균임금
FROM EMP E,(SELECT DEPTNO,ROUND(AVG(SAL),0)AL FROM EMP GROUP BY DEPTNO)D
WHERE E.DEPTNO=D.DEPTNO;

SELECT DEPTNO,ENAME,SAL,AVG(SAL) OVER(PARTITION BY DEPTNO)
FROM EMP;

-- Q. 이름, 입사한 년도(4자리), 자기 입사한 년도의 인원수를 출력하시오.
SELECT LISTAGG(ENAME),TO_CHAR(HIREDATE,'YYYY'),COUNT(*)
FROM EMP
GROUP BY TO_CHAR(HIREDATE,'YYYY');

SELECT ENAME,TO_CHAR(HIREDATE,'YYYY'),COUNT(*) OVER(PARTITION BY TO_CHAR(HIREDATE,'YYYY'))
FROM EMP;

-- 입사한 년도(4자리), 사원번호, 이름, 월급, 월급의 누적치기
-- 출력되는데 입사한 년도별로 각각 데이터를 출력하시오
EXPLAIN PLAN FOR
SELECT TO_CHAR(HIREDATE,'YYYY')HIREDATE,EMPNO,ENAME,SAL,
SUM(SAL) OVER(PARTITION BY TO_CHAR(HIREDATE,'YYYY') ORDER BY SAL)TOTALSAL
FROM EMP;
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

SELECT TO_CHAR(HIREDATE,'YYYY'),EMPNO,ENAME,SAL,
SUM(SAL) OVER(PARTITION BY TO_CHAR(HIREDATE,'YYYY')
ORDER BY EMPNO ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)누적치
FROM EMP;