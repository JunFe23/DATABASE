--20210216

SELECT * FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN('STUDENT','DEPARTMENT','PROFESSOR');

ALTER TABLE STUDENT 
ADD CONSTRAINT STUDENT_PROFNO_FK FOREIGN KEY(PROFNO)
REFERENCES PROFESSOR(PROFNO) ON DELETE CASCADE;

SELECT S.STUDNO,S.NAME,S.USERID,S.GRADE,D.DNAME,D.LOC,S.DEPTNO
FROM STUDENT S,DEPARTMENT D
WHERE S.DEPTNO=D.DEPTNO;

SELECT S.STUDNO,S.NAME,S.USERID,S.GRADE,D.DNAME,D.LOC,S.DEPTNO
FROM STUDENT S INNER JOIN DEPARTMENT D
ON S.DEPTNO=D.DEPTNO;

SELECT S.STUDNO,S.NAME,S.USERID,S.GRADE,D.DNAME,D.LOC,DEPTNO
FROM STUDENT S JOIN DEPARTMENT D USING(DEPTNO);

-- NATURAL JOIN
SELECT S.STUDNO,S.NAME,S.USERID,S.GRADE,D.DNAME,D.LOC,DEPTNO
FROM STUDENT S NATURAL JOIN DEPARTMENT D;

SELECT PROFNO,NAME,USERID,POSITION,SAL,HIREDATE,GRADE,LOSAL,HISAL
FROM PROFESSOR P, SALGRADE S
WHERE P.SAL BETWEEN S.LOSAL AND S.HISAL;


SELECT * FROM SALGRADE;

-- 지도교수를 배정받지 못 한 학생도 출력
SELECT S.STUDNO,S.NAME,S.GRADE,S.TEL,S.HEIGHT,S.PROFNO,P.NAME PRONAME
FROM STUDENT S,PROFESSOR P
WHERE S.PROFNO=P.PROFNO(+);

-- 지도교수 있는 학생만 나옴.
SELECT S.STUDNO,S.NAME,S.GRADE,S.TEL,S.HEIGHT,S.PROFNO,P.NAME PRONAME
FROM STUDENT S INNER JOIN PROFESSOR P
ON S.PROFNO=P.PROFNO;

-- 지도교수 배정받지 못한 학생도 나옴. 오른쪽 +일때 LEFT 반대는 RIGHT
SELECT S.STUDNO,S.NAME,S.GRADE,S.TEL,S.HEIGHT,S.PROFNO,P.NAME PRONAME
FROM STUDENT S LEFT OUTER JOIN PROFESSOR P
ON S.PROFNO=P.PROFNO;

-- 지도교수 배정받지 못한 학생과 학새을 배정받지 못한 교수 모두 다 -> FULL OUTER
SELECT S.STUDNO,S.NAME,S.GRADE,S.TEL,S.HEIGHT,S.PROFNO,P.NAME PRONAME
FROM STUDENT S FULL OUTER JOIN PROFESSOR P
ON S.PROFNO=P.PROFNO;

-- SELF JOIN
SELECT D1.DEPTNO,D1.DNAME,D1.COLLEGE,D1.LOC,D2.DNAME 상위
FROM DEPARTMENT D1,DEPARTMENT D2
WHERE D1.COLLEGE=D2.DEPTNO;

SELECT W.EMPNO,W.ENAME,W.SAL,W.MGR,M.ENAME MANAGER
FROM EMP W, EMP M
WHERE W.MGR=M.EMPNO;

SELECT DEPTNO,ENAME,MAX(SAL)
FROM EMP
GROUP BY DEPTNO,ENAME;

-- LISTAGG로 DEPTNO별로 정리된 결과에 포함되는 ENAME을 정리해서 출력
SELECT DEPTNO,LISTAGG(ENAME,','),MAX(SAL)
FROM EMP
GROUP BY DEPTNO;

SELECT TO_CHAR(HIREDATE,'YYYY'),LISTAGG(ENAME,','),COUNT(SAL),MAX(SAL),MIN(SAL),SUM(SAL),AVG(SAL)
FROM EMP
GROUP BY TO_CHAR(HIREDATE,'YYYY');

----오후 ------------------------------------------------------------------
SELECT * FROM EMP;

-- SUBQUERY
-- 안쪽에 있는 ALIAS는 바깥쪽에서 쓸 수 없음.
SELECT *
FROM(
SELECT A.EMPNO,A.SAL
FROM(SELECT EMPNO,SAL FROM EMP)A,(SELECT EMPNO,SAL FROM EMP)B)
WHERE A.EMPNO=B.EMPNO;

SELECT *
FROM(
SELECT A.EMPNO,A.SAL
FROM(SELECT EMPNO,SAL FROM EMP)A,(SELECT EMPNO,SAL FROM EMP)B WHERE A.EMPNO=B.EMPNO);


-- 박동진 몸무게보다 큰 사람
SELECT STUDNO,NAME,USERID,GRADE
FROM STUDENT
WHERE (WEIGHT,HEIGHT) = (SELECT WEIGHT,HEIGHT FROM STUDENT WHERE NAME = '박동진');

-- USERID가 hanal의 키보다 큰 사람은?
SELECT STUDNO,NAME,USERID,GRADE
FROM STUDENT
WHERE HEIGHT>(SELECT HEIGHT FROM STUDENT WHERE USERID = 'hanal');

-- USERID에 a가 들어간 사람의 키보다 큰사람은?
SELECT STUDNO,NAME,USERID,GRADE,HEIGHT
FROM STUDENT
--WHERE HEIGHT > ANY (SELECT HEIGHT FROM STUDENT WHERE USERID LIKE '%a%');
--= WHERE HEIGHT>160 OR HEIGHT>162 OR HEIGHT>170 OR HEIGHT>171 OR HEIGHT>172 OR HEIGHT>184;
WHERE HEIGHT > ALL (SELECT HEIGHT FROM STUDENT WHERE USERID LIKE '%a%');

SELECT USERID,HEIGHT FROM STUDENT
ORDER BY HEIGHT;


-- 101학과 학생의 몸무게중 가장 큰 사람보다 몸무게가 많은 사람의 학생정보 출력
SELECT *
FROM STUDENT
WHERE WEIGHT>ALL(SELECT WEIGHT FROM STUDENT WHERE DEPTNO = '101');
-- 101학과 학생의 몸무게중 가장 작은 사람보다 몸무게가 많이 나가는 학생의 정보 출력
SELECT *
FROM STUDENT
WHERE WEIGHT>ANY(SELECT WEIGHT FROM STUDENT WHERE DEPTNO = '101');
-- 101학과 학생의 몸무게중 가장 작은 사람보다 몸무게가 적은 사람의 학생정보 출력
SELECT *
FROM STUDENT
WHERE WEIGHT<ALL(SELECT WEIGHT FROM STUDENT WHERE DEPTNO = '101');
-- 101학과 학생의 몸무게중 가장 큰 사람보다 몸무게가 적은 사람의 학생정보 출력
SELECT *
FROM STUDENT
WHERE WEIGHT<ANY(SELECT WEIGHT FROM STUDENT WHERE DEPTNO = '101');

-- 부서코드가 30번 부서코드인 사원들의 연봉중 가장 큰 연봉보다 많이 받는 사람들 정보 출력
SELECT *
FROM EMP
WHERE SAL> ALL(SELECT SAL FROM EMP WHERE DEPTNO = '30');

-- ALLEN 연봉보다 높은 사람의 연봉을 모두 지워라
DELETE FROM EMPSUB WHERE SAL>(SELECT SAL FROM EMPSUB WHERE ENAME='ALLEN');
-- SCOTT 연봉보다 낮은 사람의 연봉을 모두 9000으로 변경해라
UPDATE EMPSUB SET SAL=9000 WHERE SAL<(SELECT SAL FROM EMPSUB WHERE ENAME='SCOTT');

-- SAL이 NULL인 것이 없으므로 괄호 안에는 아무것도 존재하지않음. 
-- 따라서 존재하지 않는 것에 EXISTS를 하므로 아무값도 출력되지 않는다.
SELECT EMPNO,ENAME,SAL,COMM,HIREDATE,SAL+COMM SCOMM
FROM EMP
WHERE EXISTS (SELECT COMM FROM EMP WHERE SAL IS NULL);
