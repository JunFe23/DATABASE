--20210218
--ADMIN GRANT CREATE VIE TO C##JUNFE

CREATE OR REPLACE VIEW VIEW_EMP1
AS
SELECT * FROM EMP;

SELECT * FROM VIEW_EMP1;

-- VIEW는 제약사항에 추가 되지 않음.
SELECT * FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN ('VIEW_EMP1');

SELECT * FROM USER_VIEWS;

DROP VIEW VIEW_EMP1;

CREATE OR REPLACE VIEW STUD_VIEW1
AS
SELECT * FROM STUDENT
WHERE HEIGHT BETWEEN 165 AND 190 AND SUBSTR(NAME,1,1) IN ('이','박','김')
AND PROFNO IS NOT NULL;


SELECT * FROM STUD_VIEW1;

CREATE OR REPLACE VIEW STUD_VIEW2
AS
SELECT * FROM STUD_VIEW1 WHERE TO_NUMBER(SUBSTR(BIRTHDATE,1,2))>=82;

SELECT * FROM STUD_VIEW2;


CREATE OR REPLACE VIEW ESM
AS
SELECT DEPTNO, MAX(HEIGHT)MX,MIN(HEIGHT)MN
FROM STUDENT
GROUP BY DEPTNO;

SELECT * FROM ESM;

--------------------------------------------------------------------------
CREATE TABLE EMPVT
AS
SELECT * FROM EMP;

SELECT * FROM EMPVT;

-- WITH CHECK OPTION 주면 INSERT 할 때 조건으로 작용.
-- WITH READ ONLY 주면 INSERT랑 DELETE가 안됨.
CREATE OR REPLACE VIEW EMPV1
AS
SELECT EMPNO,ENAME,JOB,MGR,SAL,COMM
FROM EMPVT
WHERE SAL>=3000 WITH READ ONLY;

SELECT * FROM EMPVT;
SELECT * FROM EMPV1;
DELETE FROM EMPV1 WHERE ENAME IN ('WARD','CSS');
DELETE FROM EMPVT WHERE EMPNO=8901;

DELETE FROM EMPV1;

INSERT INTO EMPV1 (EMPNO,ENAME,JOB,MGR,SAL,COMM)
VALUES(8901,'PARK','STUDENT',7566,2000,500);


SELECT*FROM DEPT;
INSERT INTO DEPT VALUES(88,'BASKET','TOKYO');

SELECT * FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN ('DEPT_V1');

CREATE OR REPLACE VIEW DEPT_V1
AS
SELECT * FROM DEPT
WHERE DEPTNO<=50 WITH CHECK OPTION;
SELECT * FROM DEPT_V1;

SELECT * FROM USER_VIEWS;

CREATE OR REPLACE VIEW EMPV2
AS
SELECT DEPTNO,MAX(SAL)MX,MIN(SAL)MN,COUNT(SAL)CT
FROM EMP
GROUP BY DEPTNO;
SELECT * FROM EMPV2;
INSERT INTO EMPV2(DEPTNO,MX,MN,CT) VALUES(40,5000,4000,9);

CREATE TABLE DEFAULTTABLE(
NO NUMBER(5) CONSTRAINT DEFAULTTABLE_NO_PK PRIMARY KEY,
MSG VARCHAR2(20) CONSTRAINT DEFAULTTABLE_MSG_NN NOT NULL,
FLOW VARCHAR2(20) CONSTRAINT  DEFAULTTALBE_FLOW_NN NOT NULL);

SELECT * FROM DEFAULTTABLE;

INSERT INTO DEFAULTTABLE VALUES(1,'AA','BB');

CREATE OR REPLACE VIEW DVIEW1(번호,메세지)
AS
SELECT NO,MSG
FROM DEFAULTTABLE;
SELECT * FROM DVIEW1;

INSERT INTO DVIEW1(번호,메세지) VALUES(2,'CC');

SELECT * FROM USER_VIEWS;

CREATE OR REPLACE VIEW JOINSDPG
AS
SELECT S.STUDNO, S.NAME, S.USERID, S.GRADE, S.IDNUM, S.BIRTHDATE, S.TEL,
S.HEIGHT, S.WEIGHT, S.DEPTNO, S.PROFNO, D.DNAME, D.COLLEGE, D.LOC,
P.PROFNO PNO, P.NAME PNAME, P.USERID PID, P.POSITION, P.SAL, P.HIREDATE,
P.COMM, P.DEPTNO DT, G.GRADE GE, G.LOSAL, G.HISAL,D2.DNAME  상위
FROM STUDENT S ,DEPARTMENT D, PROFESSOR P ,SALGRADE G,DEPARTMENT D2
WHERE (S.DEPTNO=D.DEPTNO AND S.PROFNO=P.PROFNO(+) AND P.SAL BETWEEN G.LOSAL AND G.HISAL)
AND D.COLLEGE=D2.DEPTNO;

CREATE OR REPLACE VIEW JOINSDPG2
AS
SELECT * FROM JOINSDPG
WHERE GRADE IN (1,3) OR HEIGHT>=170;


SELECT * FROM JOINSDPG;

-- DISTINCT 중복 배제
SELECT DISTINCT GRADE
FROM STUDENT;

-- 계층적 질의문
-- TOP DOWN
SELECT * FROM DEPARTMENT
START WITH DEPTNO=201
CONNECT BY PRIOR DEPTNO=COLLEGE; -- 자식키=부모키

-- BOTTOM UP
SELECT * FROM DEPARTMENT
START WITH DEPTNO=101
CONNECT BY PRIOR COLLEGE=DEPTNO; -- 부모키=자식키

-- BOTTOM UP
SELECT EMPNO,ENAME,MGR FROM EMP
START WITH EMPNO=7521
CONNECT BY PRIOR MGR=EMPNO;

-- TOP DOWN
SELECT EMPNO,ENAME,MGR FROM EMP
START WITH EMPNO=7521
CONNECT BY PRIOR EMPNO=MGR;

-- LEVEL별로 들여쓰기로 구분.
SELECT LPAD(' ',(LEVEL-1)*2)||DNAME 조직도
FROM DEPARTMENT
START WITH DNAME='공과대학'
CONNECT BY PRIOR DEPTNO=COLLEGE;

SELECT LPAD('--',(LEVEL-1)*2)||ENAME 조직도
FROM EMP
START WITH ENAME='WARD'
CONNECT BY PRIOR EMPNO=MGR;

DROP TABLE LESSON;

CREATE TABLE LESSON(
ITNO NUMBER(7) CONSTRAINT LESSON_INTO_PK PRIMARY KEY,
ITNAME VARCHAR2(20),
PARENTID NUMBER(7),
SINCE NUMBER(7));

INSERT INTO LESSON VALUES(101,'JAVA',100,1989);
INSERT INTO LESSON VALUES(102,'C#',100,1999);
INSERT INTO LESSON VALUES(103,'PYTHON',100,1985);

INSERT INTO LESSON VALUES(100,'APPLICATION',10,1985);

INSERT INTO LESSON VALUES(201,'ORACLE',200,1989);
INSERT INTO LESSON VALUES(202,'MYSQL',200,1979);
INSERT INTO LESSON VALUES(203,'MONGODB',200,1986);

INSERT INTO LESSON VALUES(200,'DBMS',10,1989);

INSERT INTO LESSON VALUES(10,'BACKEND',NULL,1950);

SELECT * FROM LESSON;

SELECT LPAD('--',(LEVEL-1)*2)||ITNAME FROM LESSON
START WITH ITNO=10
CONNECT BY PRIOR ITNO=PARENTID;


CREATE OR REPLACE FORCE VIEW FORCEVIEW(사원번호,이름)
AS
SELECT EMPNO,ENAME
FROM EM;


SELECT SAL,SUM(SAL) OVER(ORDER BY SAL DESC) TOTAL
FROM EMP;

SELECT * FROM STUDENT;

-- RANK 1
SELECT ROWNUM,STUDNO,NAME,WEIGHT,DEPTNO,RANK() OVER(ORDER BY WEIGHT DESC)RK
FROM STUDENT
WHERE ROWNUM=1;

-- 1~4 RANK
SELECT *
FROM(
SELECT STUDNO,NAME,WEIGHT,DEPTNO,RANK()OVER(ORDER BY WEIGHT DESC)RK
FROM STUDENT)
WHERE RK BETWEEN 1 AND 4;

SELECT EMPNO,ENAME,SAL,COMM,RANK()OVER(ORDER BY SAL DESC)RK1,
       DENSE_RANK()OVER(ORDER BY SAL DESC)RK2,
       ROW_NUMBER()OVER(ORDER BY SAL DESC)RK3
FROM EMP;

SELECT EMPNO,ENAME,SAL,COMM,JOB,RANK()OVER(PARTITION BY JOB ORDER BY SAL DESC)RK1,
       DENSE_RANK()OVER(PARTITION BY JOB ORDER BY SAL DESC)RK2,
       ROW_NUMBER()OVER(PARTITION BY JOB ORDER BY SAL DESC)RK3
FROM EMP
ORDER BY JOB;

SELECT ROWNUM,STUDNO,NAME,WEIGHT,HEIGHT
FROM(
SELECT STUDNO,NAME,WEIGHT,HEIGHT
FROM STUDENT
ORDER BY WEIGHT DESC);

-- ROW_NUMBER()는 정렬 한다음에 RANK 매겨줌.
SELECT ROW_NUMBER() OVER(ORDER BY WEIGHT DESC)RK,STUDNO,NAME,WEIGHT,HEIGHT
FROM STUDENT;

-- NTILE로 4등분해서 DECODE랑 CASE로 값주기.
SELECT EMPNO,ENAME,SAL,COMM,JOB,HIREDATE,
DECODE(NTILE(4) OVER(ORDER BY HIREDATE),1,'퇴사직전',2,'임원',3,'일꾼','신입'),
CASE
    WHEN NTILE(4) OVER(ORDER BY SAL DESC)=1 OR NTILE(4) OVER(ORDER BY SAL DESC)=2 THEN '연봉높다'
    ELSE '보통'
    END
FROM EMP;


SELECT EMPNO,SAL,ROUND(AVG(SAL) OVER(ORDER BY SAL DESC),1) AO,
COUNT(SAL) OVER(ORDER BY SAL DESC) SALCOUNT
FROM EMP;

--JOIN,GROUP BY, SUBQUERY, FUNCTION[단일행,복수행,분석,사용자정의함수]